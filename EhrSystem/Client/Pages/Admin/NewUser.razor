@page "/new-user"
@layout MainLayout
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin")]

<PageTitle>New User</PageTitle>

<MudItem sm="5">
    <MudCard>
        <MudCardContent Class="justify-md-center ">
            <MudForm @bind-IsValid="@isValid" @ref="form">
                <MudTextField @bind-Value="newUser.FirstName" Label="FirstName" Required="true" T="string"/>
                <MudTextField @bind-Value="newUser.LastName" Label="LastName" Required="true" T="string"/>
                <MudTextField @bind-Value="newUser.Idnp" Label="IDNP" Required="true" T="string"/>
                <MudTextField @bind-Value="newUser.Password" InputType="InputType.Password" Label="Password" Required="true" T="string"/>
                <MudSelect @bind-SelectedValues="options" Label="Roles" MultiSelection="true" Required="true" T="string">
                    <Virtualize Context="role" Items="roles">
                        <MudSelectItem Value="@role">@role</MudSelectItem>
                    </Virtualize>
                </MudSelect>
            </MudForm>
        </MudCardContent>
        <MudButton Class="ma-4" Color="Color.Secondary" Disabled="@(!isValid)" DisableElevation="true" OnClick="@CreateNewUser" Variant="Variant.Filled">Create User</MudButton>
    </MudCard>
</MudItem>

@code {
    readonly string[] roles = Enum.GetValues<UserRole>().Select(x => x.ToString()).ToArray();
    IEnumerable<string> options = new HashSet<string> { "User" };
    readonly RegisterDto newUser = new();
    MudForm form;
    bool isValid;

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await AuthService.IsUserAuthenticated();

        if (!isAuthenticated)
            NavigationManager.NavigateTo("/login");
    }

    public async Task CreateNewUser()
    {
        await form.Validate();
        newUser.Roles = options.Select(x => x).ToArray();
        var result = await AuthService.Register(newUser);

        if (result.Status)
        {
            Snackbar.Add("User Successfully Created", Severity.Success);
            await form.ResetAsync();
        }
        else
        {
            Snackbar.Add($"{result.Message}", Severity.Error);
            return;
        }

        StateHasChanged();
    }
}
