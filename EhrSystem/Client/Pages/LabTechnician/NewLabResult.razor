@page "/new-lab-result/"
@using System.Net
@layout MainLayout
@inject HttpClient HttpClient
@inject AuthService AuthService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "LabTechnician")]

<PageTitle>Upload Lab Results</PageTitle>
<MudGrid>
    <MudItem md="4" sm="6" xs="12">
        <MudAutocomplete AdornmentColor="Color.Primary"
                         AdornmentIcon="@Icons.Material.Filled.Search"
                         @bind-Value="userIdnp"
                         Label="User IDNP"
                         SearchFunc="@SearchUsers"
                         T="string"/>
    </MudItem>

    <MudButton Class="ma-4"
               Color="Color.Primary"
               Disabled="@(string.IsNullOrEmpty(userIdnp))"
               DisableElevation="true"
               OnClick="@Continue"
               Variant="Variant.Filled">
        Continue
    </MudButton>

    @if (isUserSelected)
    {
        <MudItem md="12" sm="12" xs="12">
            <MudCard>
                <MudCardContent>
                    <MudForm @bind-IsValid="@isValid">
                        <MudItem md="4" sm="6" xs="12">
                            <MudAutocomplete @bind-Value="testName"
                                             Label="Lab Name"
                                             Required="true"
                                             RequiredError="Lab name is required!"
                                             SearchFunc="@SearchLabNames"
                                             T="string"/>
                        </MudItem>

                        <MudFileUpload AppendMultipleFiles
                                       Hidden="@false"
                                       InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20"
                                       InputStyle="opacity:0"
                                       @ondragend="@ClearDragClass"
                                       @ondragenter="@SetDragClass"
                                       @ondragleave="@ClearDragClass"
                                       OnFilesChanged="OnInputFileChanged"
                                       T="IReadOnlyList<IBrowserFile>">

                            <ButtonTemplate>
                                <MudPaper Class="@dragClass"
                                          Height="300px"
                                          Outlined="true">
                                    <MudText Typo="Typo.h6">
                                        Drag and drop files here or click
                                    </MudText>
                                    @foreach (var file in fileNames)
                                    {
                                        <MudChip Color="Color.Dark" Text="@file"/>
                                    }
                                </MudPaper>

                                <MudToolBar Class="d-flex gap-4 justify-end relative z-30"
                                            DisableGutters="true">
                                    <MudButton Color="Color.Error"
                                               Disabled="@(!fileNames.Any())"
                                               OnClick="@Clear"
                                               Variant="Variant.Filled">
                                        Clear
                                    </MudButton>
                                    <MudCardActions>
                                        <MudButton Class="ml-auto"
                                                   Color="Color.Primary"
                                                   Disabled="@(!fileNames.Any() || !isValid)"
                                                   OnClick="@(async () => await Submit())"
                                                   Variant="Variant.Filled">
                                            Submit
                                        </MudButton>
                                    </MudCardActions>
                                </MudToolBar>
                            </ButtonTemplate>
                        </MudFileUpload>
                    </MudForm>
                </MudCardContent>
            </MudCard>
        </MudItem>
    }
</MudGrid>

@code {
    private string? userIdnp;
    private List<UserDto>? users = new();
    private UserDto? selectedUser = new();

    private bool isUserSelected;
    private bool isValid;
    private string patientId = string.Empty;
    private string testName;

    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string dragClass = DefaultDragClass;

    private IReadOnlyList<IBrowserFile>? files;

    // private List<string> fileNames => files.Select(x => x.Name).ToList();
    private List<string> fileNames = new();

    private readonly List<string> labNames = new LabsAndDiagnostics().Names;
    private List<string> filteredLabNames;

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await AuthService.IsUserAuthenticated();

        if (!isAuthenticated)
            NavigationManager.NavigateTo("/login");

        await GetUsers();

        StateHasChanged();

        await base.OnInitializedAsync();
    }

    public async Task GetUsers()
    {
        users = await HttpClient.GetFromJsonAsync<List<UserDto>>("api/users");
    }

    private async Task<IEnumerable<string>> SearchUsers(string value)
    {
        var userIdnps = users.Select(x => x.Idnp).ToList();
        if (string.IsNullOrEmpty(value))
            return new[] { "" };
        return userIdnps.Where(x => x.StartsWith(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task Continue()
    {
        selectedUser = users.FirstOrDefault(x => x.Idnp == userIdnp);
        patientId = selectedUser.Id;
        isUserSelected = true;
        await Clear();
        testName = string.Empty;

        StateHasChanged();
    }

    private async Task<IEnumerable<string>> SearchLabNames(string value)
    {
        if (string.IsNullOrEmpty(value))
            return labNames;
        filteredLabNames = labNames.Where(name => name.ToLower().Contains(value.ToLower())).ToList();
        return filteredLabNames;
    }

    private async Task Clear()
    {
        fileNames.Clear();
        // files.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        files = e.GetMultipleFiles();
        Console.WriteLine(files.Count);
        fileNames = files.Select(x => x.Name).ToList();
    }

    private void SetDragClass()
    {
        dragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        dragClass = DefaultDragClass;
    }

    private async Task Submit()
    {
        // long maxFileSize = 1024 * 100;
        var upload = false;

        using var content = new MultipartFormDataContent();
        content.Add(new StringContent(patientId), "PatientId");
        content.Add(new StringContent(testName), "TestName");

        foreach (var file in files)
        {
            try
            {
                var fileContent =
                    new StreamContent(file.OpenReadStream());

                fileContent.Headers.ContentType =
                    new MediaTypeHeaderValue(file.ContentType);

                content.Add(fileContent, "\"Files\"", file.Name);

                upload = true;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

        if (upload)
        {
            var response = await HttpClient.PostAsync("/api/LabResults/", content);
            if (response.StatusCode == (HttpStatusCode)200)
            {
                await Clear();
                testName = string.Empty;
                Console.WriteLine("Cleaning up");
                Snackbar.Add("Successfully Uploaded Lab Result", Severity.Success);
            }
            else
            {
                Snackbar.Add("An Eerror Occured", Severity.Error);
            }

            Console.WriteLine(response);
        }
    }
}
