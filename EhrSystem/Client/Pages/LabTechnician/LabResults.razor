@page "/{PatientId}/new-lab-result/"
@layout MainLayout
@inject HttpClient HttpClient

@using System.Net.Http.Headers
@inject ISnackbar Snackbar

<PageTitle>Upload Lab Results</PageTitle>

<MudCard>
    <MudCardContent>
        <MudItem xs="12" sm="6" md="4">
            <MudAutocomplete T="string"
                             Label="Lab Name"
                             @bind-Value="TestName"
                             SearchFunc="@SearchLabNames"/>
        </MudItem>
        <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                       AppendMultipleFiles
                       OnFilesChanged="OnInputFileChanged"
                       Hidden="@false"
                       InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20"
                       InputStyle="opacity:0"
                       @ondragenter="@SetDragClass"
                       @ondragleave="@ClearDragClass"
                       @ondragend="@ClearDragClass">
            <ButtonTemplate>
                <MudPaper Height="300px"
                          Outlined="true"
                          Class="@dragClass">
                    <MudText Typo="Typo.h6">
                        Drag and drop files here or click
                    </MudText>
                    @foreach (var file in fileNames)
                    {
                        <MudChip Color="Color.Dark" Text="@file"/>
                    }
                </MudPaper>
                <MudToolBar DisableGutters="true"
                            Class="relative d-flex justify-end gap-4 z-30">
                    <MudButton HtmlTag="label"
                               Color="Color.Primary"
                               for="@context.Id"
                               Variant="Variant.Filled">
                        Add file
                    </MudButton>
                    <MudButton OnClick="@Clear"
                               Color="Color.Error"
                               Disabled="@(!fileNames.Any())"
                               Variant="Variant.Filled">
                        Clear
                    </MudButton>
                </MudToolBar>
            </ButtonTemplate>
        </MudFileUpload>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" Disabled="@(!fileNames.Any())" OnClick="@(async () => await Submit())">Submit</MudButton>
    </MudCardActions>
</MudCard>

@code {
    [Parameter] public string? PatientId { get; set; }
    private MudForm form;

    private String TestName;
    private LabResultDto labResult = new();
    private UserDto? user = new();
    
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string dragClass = DefaultDragClass;
    private List<string> fileNames => files.Select(x => x.Name).ToList();
    private List<IBrowserFile> files = new();

    private List<string> labNames = new List<string>
    {
        "Lab 1",
        "Lab 2",
        "Lab 3",
        // Add more lab names as needed
    };
    
    private List<string> filteredLabNames;

    private async Task<IEnumerable<string>> SearchLabNames(string value)
    {
        // Perform search based on the entered text and return matching lab names
        if (string.IsNullOrEmpty(value))
            return labNames;
        filteredLabNames = labNames.Where(name => name.ToLower().Contains(value.ToLower())).ToList();
        return filteredLabNames;
    }

    private async Task Clear()
    {
        files.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        files = e.GetMultipleFiles().ToList();
    }

    private void SetDragClass()
        => dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => dragClass = DefaultDragClass;

    private async Task Submit()
    {
        // long maxFileSize = 1024 * 100;
        var upload = false;

        using var content = new MultipartFormDataContent();
        content.Add(new StringContent(PatientId), "PatientId");
        content.Add(new StringContent("0"), "LabTechnicianId");
        content.Add(new StringContent("/"), "FilePath");
        content.Add(new StringContent(TestName), "TestName");
            
        foreach (var file in files)
        {
            try
            {
                var fileContent = 
                    new StreamContent(file.OpenReadStream());

                fileContent.Headers.ContentType = 
                    new MediaTypeHeaderValue(file.ContentType);

                content.Add(
                    content: fileContent,
                    name: "\"files\"",
                    fileName: file.Name);

                upload = true;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        
        if (upload)
        {
            var response = await HttpClient.PostAsync("http://localhost:5254/api/LabResults/", content);
            Console.WriteLine(response);
        }
    }
}
