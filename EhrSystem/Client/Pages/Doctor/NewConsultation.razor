@page "/new-consultation"
@using Microsoft.AspNetCore.Authorization
@layout MainLayout
@inject HttpClient HttpClient
@inject AuthService AuthService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Doctor")]

<PageTitle>New Consultation</PageTitle>
<MudGrid>
    <MudItem xs="12" sm="6" md="4">
        <MudAutocomplete T="string"
                         Label="User IDNP"
                         @bind-Value="UserIdnp"
                         SearchFunc="@Search"
                         AdornmentIcon="@Icons.Material.Filled.Search"
                         AdornmentColor="Color.Primary"/>
    </MudItem>

    <MudButton Variant="Variant.Filled"
               Color="Color.Primary"
               DisableElevation="true"
               OnClick="@Continue"
               Class="ma-4">
        Continue
    </MudButton>

    @if (isUserSelected)
    {
        <MudItem xs="12" sm="12" md="12">
            <MudCard>
                <MudCardContent>
                    <MudItem xs="12" md="3">
                        <MudText Typo="Typo.h5" Class="pb-2"> @selectedUser.FirstName @selectedUser.LastName</MudText>
                        <MudText> @selectedUser.Idnp </MudText>
                        <MudText Class="pt-4">
                            @DateTime.Today.ToString("dd/MM/yyyy")
                        </MudText>
                    </MudItem>
                    <MudItem xs="12" md="12">
                        <MudTextField T="string"
                                      Label="Description"
                                      AutoGrow="true"
                                      Required="true"
                                      RequiredError="Description is required!"
                                      @bind-Value="newConsultation.Description"
                                      Variant="Variant.Outlined"
                                      Lines="15"/>
                    </MudItem>

                    <MudItem xs="12" md="12">
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Secondary"
                                   DisableElevation="true"
                                   OnClick="@CreateNewConsultation"
                                   Class="my-4">
                            Create Consultation
                        </MudButton>
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   DisableElevation="true"
                                   OnClick="@ViewConsultations"
                                   Class="my-4">
                            View Other Consultations
                        </MudButton>
                    </MudItem>
                </MudCardContent>
            </MudCard>
        </MudItem>
    }
</MudGrid>

@code {
    private string? UserIdnp { get; set; }
    private List<UserDto>? users = new();
    private UserDto? selectedUser = new();

    private bool isUserSelected;
    private ConsultationResponseDto newConsultation = new();

    private string userId = string.Empty;

    public async Task CreateNewConsultation()
    {
        newConsultation.PatientId = selectedUser.Id;

        var result = await HttpClient.PostAsJsonAsync($"api/consultations/", newConsultation);
        if (!result.IsSuccessStatusCode)
            Snackbar.Add("Description is required!", Severity.Error);
        else
        {
            isUserSelected = false;
            Snackbar.Add("The consultation was sent successfully!", Severity.Success);
        }
    }

    private async Task Continue()
    {
        selectedUser = users.FirstOrDefault(x => x.Idnp == UserIdnp);

        if (selectedUser is null)
        {
            Snackbar.Add("User IDNP is required!", Severity.Error);
            return;
        }

        userId = selectedUser.Id;
        isUserSelected = true;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await AuthService.IsUserAuthenticated();

        if (!isAuthenticated)
            NavigationManager.NavigateTo("/login");

        await GetUsers();

        StateHasChanged();

        await base.OnInitializedAsync();
    }

    public Task ViewConsultations()
    {
        NavigationManager?.NavigateTo($"{userId}/consultations/");
        return Task.CompletedTask;
    }

    private async Task<IEnumerable<string>> Search(string value)
    {
        var userIdnps = users.Select(x => x.Idnp).ToList();
        if (string.IsNullOrEmpty(value))
            return new[] { "" };
        return userIdnps.Where(x => x.StartsWith(value, StringComparison.InvariantCultureIgnoreCase));
    }

    public async Task GetUsers()
    {
        users = await HttpClient.GetFromJsonAsync<List<UserDto>>("api/users");
    }

}
