@page "/consultations"
@layout MainLayout
@inject HttpClient HttpClient
@attribute [Authorize(Roles = "User")]

<PageTitle>Consultations</PageTitle>

<MudGrid>
    <MudItem md="12">
        <MudText Typo="Typo.h4" GutterBottom="true">Consultations</MudText>
    </MudItem>
    @if (consultations is null || !consultations.Any())
    {
        <MudItem md="12">
            <MudAlert Severity="Severity.Info">At the moment you do not have any consultation.</MudAlert>
        </MudItem>
    }
    else
    {
        <MudItem md="12">
            <MudDataGrid Items="@consultations"
                         ReadOnly="true"
                         SortMode="SortMode.Multiple"
                         QuickFilter="@quickFilter">
                <ToolBarContent>
                    <MudItem md="2">
                        <MudTextField T="string"
                                      @bind-Value="searchString"
                                      Placeholder="Search"
                                      Adornment="Adornment.Start"
                                      Immediate="true"
                                      AdornmentIcon="@Icons.Material.Filled.Search"
                                      IconSize="Size.Medium">
                        </MudTextField>
                    </MudItem>
                </ToolBarContent>
                <Columns>
                    <HierarchyColumn T="ConsultationResponseDto"/>
                    <PropertyColumn Property="x => x.TimeStamp" Title="Time"/>
                    <PropertyColumn Property="x => doctors[x.DoctorId].FullName" Title="Doctor"/>
                </Columns>
                <ChildRowContent>
                    <MudTextField T="string"
                                  ReadOnly="true"
                                  Variant="Variant.Text"
                                  DisableUnderLine
                                  AutoGrow
                                  Text=@context.Item.Description/>
                </ChildRowContent>
                <PagerContent>
                    <MudDataGridPager T="ConsultationResponseDto"/>
                </PagerContent>
            </MudDataGrid>
        </MudItem>
    }
</MudGrid>

@code {
    private List<ConsultationResponseDto> consultations = new();
    private readonly Dictionary<string, UserDto?> doctors = new();
    private string searchString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetConsultations();
        await GetDoctors();

        StateHasChanged();

        await base.OnInitializedAsync();
    }

    private Func<ConsultationResponseDto, bool> quickFilter => filter =>
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (filter.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (doctors.Any(x => x.Value.FullName.Contains(searchString, StringComparison.OrdinalIgnoreCase)))
            return true;

        return false;
    };

    public async Task GetConsultations()
    {
        consultations = await HttpClient.GetFromJsonAsync<List<ConsultationResponseDto>>("api/consultations");
    }

    private async Task GetDoctors()
    {
        foreach (var consultation in consultations.Where(x => !doctors.ContainsKey(x.DoctorId)))
        {
            var user = await HttpClient.GetFromJsonAsync<UserDto>($"api/users/{consultation.DoctorId}");
            doctors.TryAdd(consultation.DoctorId, user);
        }
    }

}
