@page "/lab-results/{LabResultId}/"
@layout MainLayout
@inject HttpClient HttpClient

<MudGrid>
    <MudItem md="12">
        <MudText Typo="Typo.h4" GutterBottom="true">Lab Result Details</MudText>
    </MudItem>
    @if (labResultDetails is null)
    {
        <MudItem md="12">
            <MudAlert Severity="Severity.Info">At the moment you do not have any lab results.</MudAlert>
        </MudItem>
    }
    else
    {
        <MudItem>
            <MudText>Download:</MudText>
            <MudLink id="downloadFile"
                     class="btn"
                     download='@string.Format($"{labResultDetails.TestName} {labResultDetails.TimeStamp:dd-mm-yyyy}{labResultDetails.FileType}").Replace(" ", "_")'
                     role="button"
                     href='@string.Format($"http://localhost:5254/api/lab-results/{LabResultId}/download")'
                     target="=_top">
                @string.Format($"{labResultDetails.TestName} {labResultDetails.TimeStamp:dd-mm-yyyy}{labResultDetails.FileType}").Replace(" ", "_")
            </MudLink>
            <MudText>Details:</MudText>
            <MudText>@labResultDetails</MudText>
        </MudItem>
    }
</MudGrid>

@code {
    [Parameter] public string? LabResultId { get; set; }
    private LabResultResponseDto? labResultDetails;
    
    protected override async Task OnInitializedAsync()
    {
        await GetLabResultDetails();
        
        StateHasChanged();

        await base.OnInitializedAsync();
    }

    private async Task GetLabResultDetails()
    {
        labResultDetails = await HttpClient.GetFromJsonAsync<LabResultResponseDto>($"http://localhost:5254/api/lab-results/{LabResultId}");
    }
}
